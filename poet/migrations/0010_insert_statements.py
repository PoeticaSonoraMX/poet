# Generated by Django 2.0.6 on 2018-09-01 20:02

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('poet', '0009_util_funcs'),
    ]

    operations = [

        # ENTITY INSERT STATEMENTS
        migrations.RunSQL("""
        WITH inserts AS (
            SELECT part_id, 
                array_to_string(array_remove(ARRAY[nom_part, nom_materno, nom_paterno], ''), ' ')
                , seudonimo, 'PERSONA', 
                (transform_date(fecha_comienzo)).start_date, (transform_date(fecha_comienzo)).end_date,
                (transform_date(fecha_finale)).start_date, (transform_date(fecha_finale)).end_date,
                array_to_string(ARRAY[p.city_of_origin, p.subdivision_of_origin], ', '), p.country_of_origin,
                email, ruta_foto, coment_part, jsonb_strip_nulls(concat('{"place_of_death":', 
                    quote(array_to_string(
                        array_remove(ARRAY[p.city_of_death, p.subdivision_of_death, p.country_of_death], ''), ', ')
                    ), 
                ',"website":', quote(sitio_web), ',"address":', quote(direccion), ',"telephone":', quote(telefono), 
                ',"gender":', quote(genero),'}')::jsonb), estado, ARRAY[]::text[] FROM persona p
        )
        INSERT INTO poet_entity (
          id, full_name, alt_name, entity_type, from_date, to_date, from_date_end,
          to_date_end, city, country, email, file_path, comments, additional_data, release_state, tags
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM persona INTO old_query;
                SELECT count(*) FROM poet_entity WHERE entity_type = 'PERSONA' INTO new_query;
                ASSERT old_query = new_query, concat('PERSONA ENTITY FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),


        migrations.RunSQL("""
        WITH inserts AS (
            SELECT part_id, nom_part, tipo_grupo, 
                (transform_date(fecha_comienzo)).start_date, (transform_date(fecha_comienzo)).end_date,
                (transform_date(fecha_finale)).start_date, (transform_date(fecha_finale)).end_date,
                array_to_string(ARRAY[g.city_of_origin, g.subdivision_of_origin], ', '), g.country_of_origin,
                email, coment_part, jsonb_strip_nulls(concat('{"website":', quote(sitio_web), ',"address":', 
                quote(direccion), ',"telephone":', quote(telefono), '}')::jsonb), estado, ARRAY[]::text[] FROM grupo g
        )
        INSERT INTO poet_entity (
          id, full_name, entity_type, from_date, to_date, from_date_end,
          to_date_end, city, country, email, comments, additional_data, release_state, tags
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM grupo INTO old_query;
                SELECT count(*) FROM poet_entity WHERE entity_type <> 'PERSONA' INTO new_query;
                ASSERT old_query = new_query, concat('NON-PERSONA ENTITY FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT grupo_id, persona_id, TRUE, titulo, 
            (transform_date(fecha_comienzo)).start_date, (transform_date(fecha_comienzo)).end_date,
            (transform_date(fecha_finale)).start_date, (transform_date(fecha_finale)).end_date, NULL, '{}'::jsonb
             FROM persona_grupo
        )
        INSERT INTO poet_entity_to_entity_rel (
          from_model_id, to_model_id, contains, role, from_date, to_date, from_date_end,
          to_date_end, comment, additional_data
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM persona_grupo INTO old_query;
                SELECT count(*) FROM poet_entity_to_entity_rel INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY RELATION FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        # WORK INSERT STATEMENTS
        migrations.RunSQL("""
        WITH inserts AS (
            SELECT c.nom, nom_alt, (transform_date(fecha_pub)).start_date, (transform_date(fecha_pub)).end_date, 
            'COMPOSICION', texto, jsonb_strip_nulls(jsonb_build_object('id',c.id, 'language', ic.nom_idioma)), 
            tc.nom_tema, estado, cob.licencia_cobertura, cob.pais_cobertura, to_date(cob.fecha_comienzo, 'YYYY-MM-DD')
            FROM composicion c 
            LEFT JOIN (
                SELECT tc.composicion_id, array_agg(t.nom) nom_tema
                FROM tema_composicion tc JOIN tema t on tc.tema_id = t.id
                GROUP BY tc.composicion_id
                ) tc ON tc.composicion_id = c.id
            LEFT JOIN (
                SELECT ic.composicion_id, array_remove(array_agg(DISTINCT i.nom), NULL) nom_idioma
                FROM idioma_composicion ic JOIN idioma i ON ic.idioma_id = i.id
                GROUP BY ic.composicion_id
                ) ic ON ic.composicion_id = c.id
            LEFT JOIN (SELECT * FROM 
                cobertura_licencia cl
                NATURAL JOIN cobertura_tipo ct
                JOIN cobertura c ON c.cobertura_lic_id = cl.id
                ) cob ON cob.composicion_id = c.id
        )
        INSERT INTO poet_work (
          full_name, alt_name, from_date, to_date, work_type, comments, additional_data, tags, release_state, copyright,
          copyright_country, copyright_date
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM composicion INTO old_query;
                SELECT count(*) FROM poet_work WHERE work_type = 'COMPOSICION' INTO new_query;
                ASSERT old_query = new_query, concat('COMPOSITION FAILED. ', old_query, ' != ',new_query);
                SELECT sum(id) FROM composicion INTO old_query;
                SELECT sum((additional_data->>'id')::integer) FROM poet_work WHERE work_type = 'COMPOSICION' INTO new_query;
                ASSERT old_query = new_query, concat('COMPOSITION FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT a.nom, 'PISTA SON', 'AUDIO', concat(a.id , '/', a.nom), 
            array_to_string(ARRAY[p.city_of_origin, p.subdivision_of_origin], ', '), p.country_of_origin, 
            (transform_date(fecha_grab)).start_date, (transform_date(fecha_grab)).end_date, p.coment_pista_son, 
            jsonb_strip_nulls(concat('{"archivo_id":',a.id, ',"comp_id":', 
                coalesce(p.composicion_id::text, 'null'), ',"pista_son_id":', p.pista_son_id, ',"numero_de_pista":', 
                coalesce(p.numero_de_pista::text, 'null'),',"media_of_origin":', quote(p.medio), ',"fecha_cont":', 
                quote(p.fecha_cont::text), ',"duration":', a.duracion, ',"serie_id":', 
                coalesce(p.serie_id::text, 'null'),
                ',"fecha_dig_from":', quote((transform_date(p.fecha_dig)).start_date::text), 
                ',"fecha_dig_to":', quote((transform_date(p.fecha_dig)).end_date::text), 
                '}')::jsonb), gm.nom, p.estado, cob.licencia_cobertura, cob.pais_cobertura, 
                to_date(cob.fecha_comienzo, 'YYYY-MM-DD')
            FROM pista_son p 
            JOIN archivo a ON p.pista_son_id = a.pista_son_id
            LEFT JOIN (
                SELECT g.pista_son_id, array_agg(gm.nom) nom
                FROM genero_pista g JOIN genero_musical gm on g.gen_mus_id = gm.id
                GROUP BY g.pista_son_id
                ) gm ON gm.pista_son_id = p.pista_son_id
            LEFT JOIN (SELECT * FROM 
                cobertura_licencia cl
                NATURAL JOIN cobertura_tipo ct
                JOIN cobertura c ON c.cobertura_lic_id = cl.id
                ) cob ON cob.pista_son_id = p.pista_son_id
        )
        INSERT INTO poet_work (
          full_name, work_type, file_type, path_to_file, city, country, from_date, to_date, comments, 
          additional_data, tags, release_state, copyright, copyright_country, copyright_date
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM pista_son INTO old_query;
                SELECT count(*) FROM poet_work WHERE work_type = 'PISTA SON' INTO new_query;
                ASSERT old_query = new_query, concat('PISTA SON FAILED. ', old_query, ' != ',new_query);
                SELECT sum(pista_son_id) FROM pista_son INTO old_query;
                SELECT sum((additional_data->>'pista_son_id')::integer) FROM poet_work WHERE work_type = 'PISTA SON' INTO new_query;
                ASSERT old_query = new_query, concat('PISTA SON FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT s.nom, 'SERIES', s.coment, 'IMAGE', s.ruta_foto, jsonb_strip_nulls(concat('{"id":', s.id, 
            ',"giro":', quote(s.giro),'}')::jsonb), estado FROM serie s
        )
        INSERT INTO poet_work (
          full_name, work_type, comments, file_type, path_to_file, additional_data, release_state
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM serie INTO old_query;
                SELECT count(*) FROM poet_work WHERE work_type = 'SERIES' INTO new_query;
                ASSERT old_query = new_query, concat('SERIES FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT a.nom, 'ALBUM', jsonb_strip_nulls(concat('{"id":', a.id, ',"serie_id":', 
                coalesce(a.serie_id::text, 'null'),'}')::jsonb
            ), 'PUBLICADO' FROM album a
        )
        INSERT INTO poet_work (
          full_name, work_type, additional_data, release_state
          )  SELECT * FROM inserts;"""),


        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM album INTO old_query;
                SELECT count(*) FROM poet_work WHERE work_type = 'ALBUM' INTO new_query;
                ASSERT old_query = new_query, concat('ALBUM FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT c.id, t.id, TRUE, 'Is the composition of this performance.' 
            FROM (
            SELECT id, additional_data->'id' AS old_id 
            FROM poet_work WHERE work_type = 'COMPOSICION' 
            ) c JOIN (
            SELECT id, additional_data->'comp_id' AS comp_id 
            FROM poet_work WHERE work_type = 'PISTA SON'    
            ) t ON c.old_id = t.comp_id
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, contains, role
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM pista_son INTO old_query;
                SELECT count(*) FROM poet_work_to_work_rel WHERE role = 'Is the composition of this performance.' INTO new_query;
                ASSERT old_query = new_query, concat('COMP PISTA REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT s.id, a.id, TRUE, 'Is the series which contains this album.' 
            FROM (
            SELECT id, additional_data->'id' AS old_id 
            FROM poet_work WHERE work_type = 'SERIES'
            ) s JOIN (
            SELECT id, additional_data->'serie_id' AS serie_id 
            FROM poet_work WHERE work_type = 'ALBUM'    
            ) a ON s.old_id = a.serie_id
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, contains, role
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM album WHERE serie_id IS NOT NULL INTO old_query;
                SELECT count(*) FROM poet_work_to_work_rel WHERE role = 'Is the series which contains this album.' INTO new_query;
                ASSERT old_query = new_query, concat('SERIES ALBUM REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT s.id, t.id, TRUE, 'Is the series which contains this track.' 
            FROM (
                SELECT id, additional_data->'id' AS old_id 
                FROM poet_work WHERE work_type = 'SERIES'
            ) s JOIN (
                SELECT id, additional_data->'serie_id' AS serie_id 
                FROM poet_work WHERE work_type = 'PISTA SON'    
            ) t ON s.old_id = t.serie_id
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, contains, role
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM pista_son WHERE serie_id IS NOT NULL INTO old_query;
                SELECT count(*) FROM poet_work_to_work_rel WHERE role = 'Is the series which contains this track.' INTO new_query;
                ASSERT old_query = new_query, concat('SERIES TRACK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT pc.rol_composicion , pc.part_id, pw.id
            FROM participante_composicion pc
            JOIN poet_work pw ON (pw.additional_data->>'id')::integer = pc.composicion_id
            WHERE pw.work_type = 'COMPOSICION'
        )
        INSERT INTO poet_entity_to_work_rel (
          role, from_model_id, to_model_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM participante_composicion INTO old_query;
                SELECT count(*) FROM poet_entity_to_work_rel WHERE role IN (
                    SELECT * FROM rol_composicion
                ) INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY WORK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT ps.rol_pista_son, jsonb_strip_nulls(jsonb_build_object('instrument', i.nom)), ps.part_id, pw.id
            FROM participante_pista_son ps
            JOIN poet_work pw ON (pw.additional_data->>'pista_son_id')::integer = ps.pista_son_id
            JOIN instrumento i on ps.instrumento_id = i.id
            WHERE pw.work_type = 'PISTA SON'
        )
        INSERT INTO poet_entity_to_work_rel (
          role, additional_data, from_model_id, to_model_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM participante_pista_son INTO old_query;
                SELECT count(*) FROM poet_entity_to_work_rel WHERE role IN (
                    SELECT * FROM rol_pista_son
                ) INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY WORK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        ##########################################################
        # NEW RELATIONSHIPS POSSIBLE WITH THE REFACTORED SCHEMA. #
        ##########################################################

        # Relate SERIES to ENTITIES

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT s.id, c.id, 'The series that contains this composition.', TRUE
            FROM poet_work t
            JOIN poet_work_to_work_rel s_to_t ON t.id = s_to_t.to_model_id
            JOIN poet_work s ON s.id = s_to_t.from_model_id
            JOIN poet_work_to_work_rel c_to_t ON t.id = c_to_t.to_model_id
            JOIN poet_work c ON c.id = c_to_t.from_model_id
            WHERE t.work_type = 'PISTA SON'
            AND c.work_type = 'COMPOSICION'
            AND s.work_type = 'SERIES'
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, role, contains
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(DISTINCT pc.part_id)
                FROM pista_son ps
                JOIN serie s2 ON ps.serie_id = s2.id
                JOIN composicion c2 ON ps.composicion_id = c2.id
                JOIN participante_composicion pc ON c2.id = pc.composicion_id
                WHERE s2.nom ~* 'eslam'
                AND pc.rol_composicion = 'Composición' INTO old_query;
                SELECT count(DISTINCT rel.from_model_id)
                FROM poet_work c
                JOIN poet_work_to_work_rel s_to_c ON c.id = s_to_c.to_model_id
                JOIN poet_work s ON s_to_c.from_model_id = s.id
                JOIN poet_entity_to_work_rel rel on c.id = rel.to_model_id
                WHERE s.full_name ~* 'eslam'
                AND c.work_type = 'COMPOSICION'
                AND s.work_type = 'SERIES' INTO new_query;
                ASSERT old_query = new_query, concat('COMP SERIES REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        # Relate ENTITIES to SERIES.

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT 
                ps.rol_pista_son, 
                jsonb_strip_nulls(jsonb_build_object('instrument', i.nom)), 
                ps.part_id, s.id
            FROM participante_pista_son ps
            JOIN poet_work t ON (t.additional_data->>'pista_son_id')::integer = ps.pista_son_id
            JOIN instrumento i on ps.instrumento_id = i.id
            JOIN poet_work_to_work_rel rel on t.id = rel.to_model_id
            JOIN poet_work s ON rel.from_model_id = s.id
            WHERE t.work_type = 'PISTA SON'
            AND s.work_type = 'SERIES'
        )
        INSERT INTO poet_entity_to_work_rel (
          role, additional_data, from_model_id, to_model_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT pc.rol_composicion, pc.part_id, s.id
            FROM participante_composicion pc
            JOIN poet_work c ON (c.additional_data->>'id')::integer = pc.composicion_id
            JOIN poet_work_to_work_rel rel on c.id = rel.to_model_id
            JOIN poet_work s ON rel.from_model_id = s.id
            WHERE c.work_type = 'COMPOSICION'
            AND s.work_type = 'SERIES'
        )
        INSERT INTO poet_entity_to_work_rel (
          role, from_model_id, to_model_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(DISTINCT u.part_id) FROM ((
                SELECT pc.part_id
                FROM pista_son ps
                JOIN serie s2 ON ps.serie_id = s2.id
                JOIN composicion c2 ON ps.composicion_id = c2.id
                JOIN participante_composicion pc ON c2.id = pc.composicion_id
                WHERE s2.nom ~* 'eslam'
                AND pc.rol_composicion = 'Composición'
                ) UNION (
                SELECT DISTINCT s3.part_id
                FROM pista_son ps
                JOIN serie s2 ON ps.serie_id = s2.id
                JOIN participante_pista_son s3 on ps.pista_son_id = s3.pista_son_id
                WHERE s2.nom ~* 'eslam'
                AND s3.rol_pista_son IN ('Lectura en voz alta', 'Interpretación musical')
                )) u INTO old_query;
                SELECT count(DISTINCT e_to_s.from_model_id)
                FROM poet_work s
                JOIN poet_entity_to_work_rel e_to_s on s.id = e_to_s.to_model_id
                WHERE s.full_name ~* 'eslam'
                AND s.work_type = 'SERIES'
                AND e_to_s.role IN ('Lectura en voz alta', 'Interpretación musical', 'Composición') INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY WORK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

    ]
