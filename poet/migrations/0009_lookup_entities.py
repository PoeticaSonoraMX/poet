# Generated by Django 2.1.2 on 2018-10-18 12:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('poet', '0008_model_refactor'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntityToWorkRole',
            fields=[
                ('role_type', models.CharField(choices=[('Lectura en voz alta', 'Lectura en voz alta'), ('Interpretación musical', 'Interpretación musical'), ('Ingeniería de sonido', 'Ingeniería de sonido'), ('Producción', 'Producción'), ('Dirección', 'Dirección'), ('Post-producción', 'Post-producción'), ('Auxiliar de sonido', 'Auxiliar de sonido'), ('Contribuidor', 'Contribuidor'), ('Publicador', 'Publicador'), ('Composición', 'Composición'), ('Traducción', 'Traducción')], max_length=128, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'poet_entity_to_work_role',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('entity_type', models.CharField(choices=[('PERSONA', 'Persona'), ('GRUPO', 'Grupo'), ('ORGANIZACIÓN', 'Organización'), ('FESTIVAL', 'Festival'), ('UNIVERSIDAD', 'Universidad'), ('COLECTIVO', 'Colectivo'), ('ESTACIÓN RADIOFÓNICA', 'Estación radiofónica'), ('EDUCACIÓN E INVESTIGACIÓN', 'Educación e investigación'), ('ARCHIVO SONORO', 'Archivo sonoro'), ('SERVICIOS DE STREAMING', 'Servicios de streaming'), ('MUSEO', 'Museo'), ('EDITORIAL', 'Editorial'), ('SELLO DISCOGRÁFICO', 'Sello discográfico'), ('CENTRO CULTURAL', 'Centro cultural'), ('BANDA MUSICAL', 'Banda musical')], max_length=128, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'poet_entity_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReleaseState',
            fields=[
                ('release_state', models.CharField(choices=[('PUBLICADO', 'Published'), ('DEPOSITAR', 'Deposited'), ('PENDIENTE', 'Pending'), ('REJECTED', 'Rejected')], db_column='release_state', max_length=128, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'poet_release_state',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkType',
            fields=[
                ('work_type', models.CharField(choices=[('SERIES', 'Series'), ('RECORDING', 'Recording')], max_length=128, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'poet_work_type',
                'managed': True,
            },
        ),
        migrations.AlterField(
            model_name='entity',
            name='entity_type',
            field=models.ForeignKey(db_column='entity_type', on_delete=django.db.models.deletion.PROTECT, to='poet.EntityType'),
        ),
        migrations.AlterField(
            model_name='entity',
            name='release_state',
            field=models.ForeignKey(db_column='release_state', default='PENDIENTE', on_delete=django.db.models.deletion.PROTECT, to='poet.ReleaseState'),
        ),
        migrations.AlterField(
            model_name='entitytoentityrel',
            name='contains',
            field=models.BooleanField(default=False, verbose_name='Consists of'),
        ),
        migrations.AlterField(
            model_name='entitytoworkrel',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='poet.EntityToWorkRole'),
        ),
        migrations.AlterField(
            model_name='historicalentity',
            name='entity_type',
            field=models.ForeignKey(blank=True, db_column='entity_type', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.EntityType'),
        ),
        migrations.AlterField(
            model_name='historicalentity',
            name='release_state',
            field=models.ForeignKey(blank=True, db_column='release_state', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.ReleaseState'),
        ),
        migrations.AlterField(
            model_name='historicalentitytoentityrel',
            name='contains',
            field=models.BooleanField(default=False, verbose_name='Consists of'),
        ),
        migrations.AlterField(
            model_name='historicalentitytoworkrel',
            name='role',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.EntityToWorkRole'),
        ),
        migrations.AlterField(
            model_name='historicalwork',
            name='release_state',
            field=models.ForeignKey(blank=True, db_column='release_state', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.ReleaseState'),
        ),
        migrations.AlterField(
            model_name='historicalwork',
            name='work_type',
            field=models.ForeignKey(blank=True, db_column='work_type', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.WorkType'),
        ),
        migrations.AlterField(
            model_name='historicalworktoworkrel',
            name='contains',
            field=models.BooleanField(default=False, verbose_name='Consists of'),
        ),
        migrations.AlterField(
            model_name='work',
            name='release_state',
            field=models.ForeignKey(db_column='release_state', default='PENDIENTE', on_delete=django.db.models.deletion.PROTECT, to='poet.ReleaseState'),
        ),
        migrations.AlterField(
            model_name='work',
            name='work_type',
            field=models.ForeignKey(db_column='work_type', on_delete=django.db.models.deletion.PROTECT, to='poet.WorkType'),
        ),
        migrations.AlterField(
            model_name='worktoworkrel',
            name='contains',
            field=models.BooleanField(default=False, verbose_name='Consists of'),
        ),
    ]
