# Generated by Django 2.1.2 on 2018-10-21 18:17

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('poet', '0011_insert_statements'),
    ]

    operations = [

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT s.id, a.id, TRUE, 'Is the series which contains this album.' 
            FROM (
            SELECT id, additional_data->'id' AS old_id 
            FROM poet_work WHERE work_type = 'SERIES'
            ) s JOIN (
            SELECT id, additional_data->'series_id' AS series_id
            FROM poet_work WHERE (additional_data->>'is_album')::boolean = TRUE  
            ) a ON s.old_id = a.series_id
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, contains, role_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM album WHERE serie_id IS NOT NULL INTO old_query;
                SELECT count(*) FROM poet_work_to_work_rel WHERE role_id = 'Is the series which contains this album.' INTO new_query;
                ASSERT old_query = new_query, concat('SERIES ALBUM REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT s.id, t.id, TRUE, 'Is the series which contains this track.' 
            FROM (
                SELECT id, additional_data->'id' AS old_id 
                FROM poet_work WHERE work_type = 'SERIES'
                AND NOT additional_data ? 'is_album'
            ) s JOIN (
                SELECT id, additional_data->'series_id' AS series_id 
                FROM poet_work WHERE work_type = 'RECORDING'    
            ) t ON s.old_id = t.series_id
        )
        INSERT INTO poet_work_to_work_rel (
          from_model_id, to_model_id, contains, role_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM pista_son WHERE serie_id IS NOT NULL INTO old_query;
                SELECT count(*) FROM poet_work_to_work_rel WHERE role_id = 'Is the series which contains this track.' INTO new_query;
                ASSERT old_query = new_query, concat('SERIES TRACK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT DISTINCT pc.rol_composicion , pc.part_id, pw.id
            FROM participante_composicion pc
            JOIN poet_work pw ON (pw.additional_data->>'comp_id')::integer = pc.composicion_id
            WHERE pw.work_type = 'RECORDING'
        )
        INSERT INTO poet_entity_to_work_rel (
          role_id, from_model_id, to_model_id
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM participante_composicion pc JOIN pista_son ps ON 
                ps.composicion_id = pc.composicion_id INTO old_query;
                SELECT count(*) FROM poet_entity_to_work_rel WHERE role_id IN (
                    SELECT * FROM rol_composicion
                ) INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY WORK-COMP REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        migrations.RunSQL("""
        WITH inserts AS (
            SELECT ps.rol_pista_son, jsonb_strip_nulls(
            jsonb_build_object(
                'instrument', i.nom, 'instrument_family', fi.nom
                )
            ), ps.part_id, pw.id, i.coment
            FROM participante_pista_son ps
            JOIN poet_work pw ON (pw.additional_data->>'recording_id')::integer = ps.pista_son_id
            JOIN instrumento i on ps.instrumento_id = i.id
            LEFT JOIN familia_instrumento fi on i.familia_instr_id = fi.id
            WHERE pw.work_type = 'RECORDING'
        )
        INSERT INTO poet_entity_to_work_rel (
          role_id, additional_data, from_model_id, to_model_id, comments
          )  SELECT * FROM inserts;"""),

        migrations.RunSQL("""
        DO $$
            DECLARE
                old_query integer;
                new_query integer;
            BEGIN
                SELECT count(*) FROM participante_pista_son INTO old_query;
                SELECT count(*) FROM poet_entity_to_work_rel WHERE role_id IN (
                    SELECT * FROM rol_pista_son
                ) INTO new_query;
                ASSERT old_query = new_query, concat('ENTITY WORK REL FAILED. ', old_query, ' != ',new_query);
            END;
        $$;"""),

        ##########################################################
        # NEW RELATIONSHIPS POSSIBLE WITH THE REFACTORED SCHEMA. #
        ##########################################################

        # Relate SERIES to ENTITIES

        # Relate ENTITIES to SERIES.

        # migrations.RunSQL("""
        # WITH inserts AS (
        #     SELECT DISTINCT
        #         ps.rol_pista_son,
        #         jsonb_strip_nulls(jsonb_build_object('instrument', i.nom)),
        #         ps.part_id, s.id
        #     FROM participante_pista_son ps
        #     JOIN poet_work t ON (t.additional_data->>'recording_id')::integer = ps.pista_son_id
        #     JOIN instrumento i on ps.instrumento_id = i.id
        #     JOIN poet_work_to_work_rel rel on t.id = rel.to_model_id
        #     JOIN poet_work s ON rel.from_model_id = s.id
        #     WHERE t.work_type = 'RECORDING'
        #     AND s.work_type = 'SERIES'
        # )
        # INSERT INTO poet_entity_to_work_rel (
        #   role, additional_data, from_model_id, to_model_id
        #   )  SELECT * FROM inserts;"""),

        # migrations.RunSQL("""
        # DO $$
        #     DECLARE
        #         old_query integer;
        #         new_query integer;
        #     BEGIN
        #         SELECT count(DISTINCT u.part_id) FROM ((
        #         SELECT pc.part_id
        #         FROM pista_son ps
        #         JOIN serie s2 ON ps.serie_id = s2.id
        #         JOIN composicion c2 ON ps.composicion_id = c2.id
        #         JOIN participante_composicion pc ON c2.id = pc.composicion_id
        #         WHERE s2.nom ~* 'eslam'
        #         AND pc.rol_composicion = 'Composici贸n'
        #         ) UNION (
        #         SELECT DISTINCT s3.part_id
        #         FROM pista_son ps
        #         JOIN serie s2 ON ps.serie_id = s2.id
        #         JOIN participante_pista_son s3 on ps.pista_son_id = s3.pista_son_id
        #         WHERE s2.nom ~* 'eslam'
        #         AND s3.rol_pista_son IN ('Lectura en voz alta', 'Interpretaci贸n musical')
        #         )) u INTO old_query;
        #         SELECT count(DISTINCT e_to_s.from_model_id)
        #         FROM poet_work s
        #         JOIN poet_entity_to_work_rel e_to_s on s.id = e_to_s.to_model_id
        #         WHERE s.full_name ~* 'eslam'
        #         AND s.work_type = 'SERIES'
        #         AND e_to_s.role IN ('Lectura en voz alta', 'Interpretaci贸n musical', 'Composici贸n') INTO new_query;
        #         ASSERT old_query = new_query, concat('ENTITY WORK REL FAILED. ', old_query, ' != ',new_query);
        #     END;
        # $$;"""),

    ]
