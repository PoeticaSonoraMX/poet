# Generated by Django 2.0.6 on 2018-08-20 01:52

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('poet', '0007_historicalcomposicion'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('alt_name', models.TextField()),
                ('type', models.CharField(choices=[('Persona', 'Persona'), ('Grupo', 'Grupo'), ('Organización', 'Organización'), ('Festival', 'Festival'), ('Universidad', 'Universidad'), ('Colectivo', 'Colectivo'), ('Estación radiofónica', 'Estación radiofónica'), ('Educación e investigación', 'Educación e investigación'), ('Archivo sonoro', 'Archivo sonoro'), ('Servicios de streaming', 'Servicios de streaming'), ('Museo', 'Museo'), ('Editorial', 'Editorial'), ('Sello discográfico', 'Sello discográfico'), ('Centro cultural', 'Centro cultural'), ('Banda musical', 'Banda musical')], default='Persona', max_length=32)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('from_date_end', models.DateField()),
                ('to_date_end', models.DateField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('file_path', models.FilePathField()),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('comments', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('state', models.CharField(choices=[('PUBLICADO', 'Published'), ('DEPOSITAR', 'Deposited'), ('PENDIENTE', 'Pending'), ('REJECTED', 'Rejected')], default='PENDIENTE', max_length=32)),
            ],
            options={
                'db_table': 'poet_entity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EntityToEntityRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contains', models.BooleanField(default=False, verbose_name='Is part of')),
                ('role', models.TextField(blank=True, null=True)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('from_date_end', models.DateField()),
                ('to_date_end', models.DateField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('from_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_entity', to='poet.Entity')),
                ('to_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_entity', to='poet.Entity')),
            ],
            options={
                'db_table': 'poet_entity_to_entity_rel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EntityToWorkRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Lectura en voz alta', 'Lectura en voz alta'), ('Interpretación musical', 'Interpretación musical'), ('Ingeniería de sonido', 'Ingeniería de sonido'), ('Producción', 'Producción'), ('Dirección', 'Dirección'), ('Post-producción', 'Post-producción'), ('Auxiliar de sonido', 'Auxiliar de sonido'), ('Contribuidor', 'Contribuidor'), ('Publicador', 'Publicador'), ('Composición', 'Composición'), ('Traducción', 'Traducción')], max_length=128)),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('from_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poet.Entity')),
            ],
            options={
                'db_table': 'poet_entity_to_work_rel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HistoricalEntity',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.TextField()),
                ('alt_name', models.TextField()),
                ('type', models.CharField(choices=[('Persona', 'Persona'), ('Grupo', 'Grupo'), ('Organización', 'Organización'), ('Festival', 'Festival'), ('Universidad', 'Universidad'), ('Colectivo', 'Colectivo'), ('Estación radiofónica', 'Estación radiofónica'), ('Educación e investigación', 'Educación e investigación'), ('Archivo sonoro', 'Archivo sonoro'), ('Servicios de streaming', 'Servicios de streaming'), ('Museo', 'Museo'), ('Editorial', 'Editorial'), ('Sello discográfico', 'Sello discográfico'), ('Centro cultural', 'Centro cultural'), ('Banda musical', 'Banda musical')], default='Persona', max_length=32)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('from_date_end', models.DateField()),
                ('to_date_end', models.DateField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('file_path', models.FilePathField()),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('comments', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('state', models.CharField(choices=[('PUBLICADO', 'Published'), ('DEPOSITAR', 'Deposited'), ('PENDIENTE', 'Pending'), ('REJECTED', 'Rejected')], default='PENDIENTE', max_length=32)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical entity',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEntityToEntityRel',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('contains', models.BooleanField(default=False, verbose_name='Is part of')),
                ('role', models.TextField(blank=True, null=True)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('from_date_end', models.DateField()),
                ('to_date_end', models.DateField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('from_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Entity')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('to_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Entity')),
            ],
            options={
                'verbose_name': 'historical entity to entity rel',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEntityToWorkRel',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('role', models.CharField(choices=[('Lectura en voz alta', 'Lectura en voz alta'), ('Interpretación musical', 'Interpretación musical'), ('Ingeniería de sonido', 'Ingeniería de sonido'), ('Producción', 'Producción'), ('Dirección', 'Dirección'), ('Post-producción', 'Post-producción'), ('Auxiliar de sonido', 'Auxiliar de sonido'), ('Contribuidor', 'Contribuidor'), ('Publicador', 'Publicador'), ('Composición', 'Composición'), ('Traducción', 'Traducción')], max_length=128)),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('from_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Entity')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical entity to work rel',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWork',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.TextField()),
                ('alt_name', models.TextField()),
                ('type', models.CharField(choices=[('ALBUM', 'Album'), ('SERIE', 'Series'), ('COMPOSICION', 'Composition'), ('PISTA SON', 'Recording')], default='PISTA SON', max_length=32)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('path_to_file', models.FilePathField()),
                ('file_type', models.CharField(choices=[('AUDIO', 'Audio'), ('IMAGE', 'Image')], default='PENDIENTE', max_length=25)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('comments', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('state', models.CharField(choices=[('PUBLICADO', 'Published'), ('DEPOSITAR', 'Deposited'), ('PENDIENTE', 'Pending'), ('REJECTED', 'Rejected')], default='PENDIENTE', max_length=32)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical work',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWorkToWorkRel',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('contains', models.BooleanField(default=False, verbose_name='Is part of')),
                ('order', models.IntegerField(blank=True, null=True)),
                ('role', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical work to work rel',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('alt_name', models.TextField()),
                ('type', models.CharField(choices=[('ALBUM', 'Album'), ('SERIE', 'Series'), ('COMPOSICION', 'Composition'), ('PISTA SON', 'Recording')], default='PISTA SON', max_length=32)),
                ('from_date', models.DateField()),
                ('to_date', models.DateField()),
                ('city', models.TextField(blank=True, null=True)),
                ('country', models.TextField(blank=True, null=True)),
                ('path_to_file', models.FilePathField()),
                ('file_type', models.CharField(choices=[('AUDIO', 'Audio'), ('IMAGE', 'Image')], default='PENDIENTE', max_length=25)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, size=None)),
                ('comments', models.TextField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('state', models.CharField(choices=[('PUBLICADO', 'Published'), ('DEPOSITAR', 'Deposited'), ('PENDIENTE', 'Pending'), ('REJECTED', 'Rejected')], default='PENDIENTE', max_length=32)),
            ],
            options={
                'db_table': 'poet_work',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkToWorkRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contains', models.BooleanField(default=False, verbose_name='Is part of')),
                ('order', models.IntegerField(blank=True, null=True)),
                ('role', models.TextField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('from_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_work', to='poet.Work')),
                ('to_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_work', to='poet.Work')),
            ],
            options={
                'db_table': 'poet_work_to_work_rel',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='work',
            name='self_relation',
            field=models.ManyToManyField(blank=True, through='poet.WorkToWorkRel', to='poet.Work'),
        ),
        migrations.AddField(
            model_name='historicalworktoworkrel',
            name='from_model',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Work'),
        ),
        migrations.AddField(
            model_name='historicalworktoworkrel',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalworktoworkrel',
            name='to_model',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Work'),
        ),
        migrations.AddField(
            model_name='historicalentitytoworkrel',
            name='to_model',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='poet.Work'),
        ),
        migrations.AddField(
            model_name='entitytoworkrel',
            name='to_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poet.Work'),
        ),
        migrations.AddField(
            model_name='entity',
            name='self_relation',
            field=models.ManyToManyField(blank=True, through='poet.EntityToEntityRel', to='poet.Entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='work_relation',
            field=models.ManyToManyField(blank=True, through='poet.EntityToWorkRel', to='poet.Work'),
        ),
    ]
